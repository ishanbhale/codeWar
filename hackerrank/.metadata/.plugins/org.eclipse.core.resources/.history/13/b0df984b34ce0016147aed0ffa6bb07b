package com.practice.geekforgeeks;

import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.io.InputStream;
import java.io.BufferedReader;
import java.util.List;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Random;
import java.io.PrintWriter;
import java.util.HashSet;
import java.util.StringTokenizer;
import java.util.Arrays;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 *
 * @author AlexFetisov
 */
public class Solution {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        TaskC_HR_1 solver = new TaskC_HR_1();
        solver.solve(1, in, out);
        out.close();
    }

    static class TaskC_HR_1 {
        public void solve(int testNumber, InputReader in, PrintWriter out) {
            int test = in.nextInt();
            int[] primes = IntegerUtils.generatePrimes(500001);
            Random r = new Random(3731);
            test:
            while (test-- > 0) {
                int n = in.nextInt();
                int[] a = Utils.readIntArray(in, n);

                HashSet<Integer> primesToTest = new HashSet<Integer>();
                for (int coinFlip = 0; coinFlip < 20; ++coinFlip) {
                    int id = r.nextInt(n);
                    List<Pair<Long, Integer>> p = IntegerUtils.factorize(a[id]);
                    for (Pair<Long, Integer> pp : p) {
                        primesToTest.add(pp.first.intValue());
                    }
                }

                List<Integer> p = new ArrayList<Integer>(primesToTest);
                for (int pi : p) {
                    for (int pj : p) {
                        if (pi >= pj) {
                            int both = 0;
                            int ci = 0, cj = 0;
                            boolean bad = false;
                            for (int x : a) {
                                if (x % pi == 0 && x % pj == 0) {
                                    ++both;
                                } else if (x % pi == 0) {
                                    ++ci;
                                } else if (x % pj == 0) {
                                    ++cj;
                                } else {
                                    bad = true;
                                    break;
                                }
                            }
                            if (bad) continue;

                            int ni = 0, nj = 0;
                            if (ci < n / 2) {
                                ni += (n / 2) - ci;
                            }
                            if (cj < n / 2) {
                                nj += (n / 2) - cj;
                            }
                            both -= ni;
                            if (both < 0) {
                                continue;
                            }
                            if (both >= nj) {
                                out.println("YES");
                                continue test;
                            }
                        }
                    }
                }
                out.println("NO");
            }
        }

    }

    static class Utils {
        public static int[] readIntArray(InputReader in, int n) {
            int[] a = new int[n];
            for (int i = 0; i < n; ++i) {
                a[i] = in.nextInt();
            }
            return a;
        }

    }

    static class Pair<U, V> implements Comparable<Pair<U, V>> {
        public final U first;
        public final V second;

        public static <U, V> Pair<U, V> makePair(U first, V second) {
            return new Pair<U, V>(first, second);
        }

        public Pair(U first, V second) {
            this.first = first;
            this.second = second;
        }


        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            Pair pair = (Pair) o;

            return !(first != null ? !first.equals(pair.first) : pair.first != null) && !(second != null ? !second.equals(pair.second) : pair.second != null);

        }


        public int hashCode() {
            int result = first != null ? first.hashCode() : 0;
            result = 31 * result + (second != null ? second.hashCode() : 0);
            return result;
        }


        public String toString() {
            return "(" + first + "," + second + ")";
        }

        @SuppressWarnings({"unchecked"})
        public int compareTo(Pair<U, V> o) {
            int value = ((Comparable<U>) first).compareTo(o.first);
            if (value != 0)
                return value;
            return ((Comparable<V>) second).compareTo(o.second);
        }

    }

    static class InputReader {
        private BufferedReader reader;
        private StringTokenizer stt;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream));
        }

        public String nextLine() {
            try {
                return reader.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public String nextString() {
            while (stt == null || !stt.hasMoreTokens()) {
                stt = new StringTokenizer(nextLine());
            }
            return stt.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(nextString());
        }

    }

    static class IntegerUtils {
        public static int[] generatePrimes(int upLimit) {
            int[] isPrime = generateBitPrime(upLimit);
            ArrayList<Integer> result = new ArrayList<Integer>();
            for (int i = 0; i < upLimit; ++i) {
                if ((isPrime[i >> 5] >>> (i & 31) & 1) == 1) {
                    result.add(i);
                }
            }
            int[] resultArray = new int[result.size()];
            for (int i = 0; i < result.size(); ++i) {
                resultArray[i] = result.get(i);
            }
            return resultArray;
        }

        public static int[] generateBitPrime(int upLimit) {
            int[] isPrime = new int[(upLimit + 31) >> 5];
            if (upLimit < 2) {
                return isPrime;
            }
            Arrays.fill(isPrime, -1);
            isPrime[0] &= -4;
            for (int i = 2; i * i < upLimit; ++i) {
                if ((isPrime[i >> 5] >>> (i & 31) & 1) == 1) {
                    for (int j = i * i; j < upLimit; j += i) {
                        isPrime[j >> 5] &= (-1 - (1 << (j & 31)));
                    }
                }
            }
            return isPrime;
        }

        public static List<Pair<Long, Integer>> factorize(long number) {
            List<Pair<Long, Integer>> result = new ArrayList<Pair<Long, Integer>>();
            for (long i = 2; i * i <= number; i++) {
                if (number % i == 0) {
                    int power = 0;
                    do {
                        power++;
                        number /= i;
                    } while (number % i == 0);
                    result.add(Pair.makePair(i, power));
                }
            }
            if (number != 1) {
                result.add(Pair.makePair(number, 1));
            }
            return result;
        }

    }
}

